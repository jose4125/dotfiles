include .env
export

download_root = ${DOWNLOADROOT}
fonts = ${MPATH}/$$(whoami)/${FONTS}
dot_dev_root = ${DEVROOT}/${DOTDEVROOT}
dev_root = ${DEVROOT}
kind = ${KIND}
jetbrains_mono_version = ${JETBRAINSMONOVERSION}
nvm_version = ${NVMVERSION}
flutter_version = ${FLUTTERVERSION}

all: jetbrainsmono simlinkfiles toolsandplugins pyenv devops ngrok nvm restart

ohmyzsh: ohmyzshinstall

python: pythonsetupglobal pythontools

testvar:
	@echo download = ${download_root}
	@echo fonts = ${fonts}
	@echo dots = ${dot_dev_root}
	@echo dev = ${dev_root}
	@echo kind = ${kind}
	@echo jetbrainsmono = ${jetbrains_mono_version}
	@echo nvm = ${nvm_version}
	@echo flutter = ${flutter_version}

clean: jetbrainsmonoclean ngrokclean flutterclean

restart:
	zsh

brewinstall:
	@echo "ðŸ’¾ brew installation"
	which brew || /usr/bin/ruby -e "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	@echo "ðŸŒ® done brew âœ…"

zshinstall: brewinstall
	@echo "ðŸ’¾ zsh installation"
	brew list zsh || brew install zsh
	@echo "ðŸŒ® done zsh âœ…"

ohmyzshinstall: zshinstall
	@echo "ðŸ’¾ oh-my-zsh installation"
	ls ~/.oh-my-zsh || sh -c "$$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
	@echo "ðŸŒ® done oh-my-zsh âœ…"

zshrcremove:
	@echo "ðŸ›Ž .zshrc file exist"
	(test -f ~/.zshrc && echo ".zshrc exist -> removing file\n" && rm -rf ~/.zshrc) || (echo ".zshrc no exist\n")
	@echo "ðŸŒ® done .zshrc file exist âœ…"

# ====== JETBRAINS MONO FONT ======
jetbrainsmono: jetbrainsmonocopy jetbrainsmonounzip jetbrainsmonodownload

jetbrainsmonodownload:
	@echo "ðŸ’ˆ jetBrains Mono nerd font download"
	(test -d ${download_root}/JetBrainsMono && echo "JetBrainsMono exist\n") || (echo "downloading JetBrainsMono\n" && curl https://github.com/ryanoasis/nerd-fonts/releases/download/v${jetbrains_mono_version}/JetBrainsMono.zip -L -o ${download_root}/JetBrainsMono.zip)

jetbrainsmonounzip: jetbrainsmonodownload
	(test -f ${download_root}/JetBrainsMono.zip && echo "JetBrainsMono zip  exist -> unziping\n" && unzip ${download_root}/JetBrainsMono.zip -d ${download_root}/JetBrainsMono ) || (echo "JetBrainsMono zip no exist\n")

jetbrainsmonocopy: jetbrainsmonounzip
	cp ${download_root}/JetBrainsMono/JetBrains\ Mono\ Regular\ Nerd\ Font\ Complete\ Mono.ttf ${fonts}/JetBrains\ Mono\ Regular\ Nerd\ Font\ Complete\ Mono.ttf
	cp ${download_root}/JetBrainsMono/JetBrains\ Mono\ Regular\ Nerd\ Font\ Complete.ttf ${fonts}/JetBrains\ Mono\ Regular\ Nerd\ Font\ Complete.ttf

jetbrainsmonoclean:
	(test -f ${download_root}/JetBrainsMono.zip && echo "JetBrainsMono zip  exist -> removing zip\n" && rm -rf ${download_root}/JetBrainsMono.zip) || (echo "JetBrainsMono zip no exist\n")

# ====== SYMBOLIK LINKINF FILES ======
simlinkfiles: zshlink initvimlink zprofilelink starshiplink cocsettingslink cocextensionslink

zshlink: zshrcremove
	@echo "ðŸ”— zshrc link"
	(test -L ~/.zshrc && echo ".zshrc exist\n") || (echo "linking zshrc\n" && ln -s ${dot_dev_root}/dotfiles/zshrc ~/.zshrc)
	@echo "ðŸŒ® done zshrc link âœ…"

starshiplink:
	@echo "ðŸ”— starship link"
	(test -L ~/.config/starship.toml && echo "starship.toml exist\n") || (echo "linking strship\n" && ln -s ${dot_dev_root}/starship.toml ~/.config/starship.toml)
	@echo "ðŸŒ® done starship link âœ…"

zprofilelink:
	@echo "ðŸ”— zprofile link"
	(test -L ~/.zprofile && echo ".zprofile exist\n") || (echo "linking zprofile\n" && ln -s ${dot_dev_root}/zprofile ~/.zprofile)
	@echo "ðŸŒ® done zprofile link âœ…"

initvimlink:
	@echo "ðŸ”— init.vim link"
	(test -L ~/.config/nvim/ini.vim && echo "init.vim exist\n") || (test ! -d ~/.config/nvim/ && echo "creating nvim folder\n" && mkdir -p ~/.config/nvim) && (echo "linking init.vim\n" && ln -s ${dot_dev_root}/init.vim ~/.config/nvim/init.vim)
	@echo "ðŸŒ® done init.nvim link âœ…"

cocsettingslink:
	@echo "ðŸ”— coc settings link"
	(test -L ~/.config/nvim/coc-settings.json && echo "coc-settings exist\n") || (echo "linking coc-settings\n" && ln -s ${dot_dev_root}/coc-settings.json ~/.config/nvim/coc-settings.json)
	@echo "ðŸŒ® done coc settings link âœ…"

cocextensionslink:
	@echo "ðŸ”— coc extensions link"
	(test -L ~/.config/coc/extensions/package.json && echo "coc extensions exist\n") || (test ! -d ~/.config/coc/extensions && echo "creating coc extensions folder\n" && mkdir -p ~/.config/coc/extensions) && (echo "linking coc extensions\n" && ln -s ${dot_dev_root}/coc/extensions/package.json ~/.config/coc/extensions/package.json)
	@echo "ðŸŒ® done coc extensions link âœ…"

# ====== TOOLS AND PLUGINS ======
toolsandplugins: embarkdownload zshautosugestioninstall zshsyntaxhighlightinginstall vimpluginstall neoviminstall tmuxinstall starshipinstall

embarkdownload:
	@echo "ðŸ’ˆ embrak iterm download"
	(test -d ${download_root}/embark-iterm && echo "embark iterm exist\n") || (echo "cloning embark iterm\n" && git clone https://github.com/embark-theme/iterm.git ${download_root}/embark-iterm)
	@echo "ðŸŒ® done embark iterm âœ…"

zshautosugestioninstall:
	@echo "ðŸ’ˆ zsh-autosugestion installation"
	(test -d $${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions && echo "zsh-autosugestion exist\n") || (echo "cloning zsh-autosugestion\n" && git clone https://github.com/zsh-users/zsh-autosuggestions $${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions)
	@echo "ðŸŒ® done zsh-autosugestion âœ…"

zshsyntaxhighlightinginstall:
	@echo "ðŸ’ˆ zsh-syntax-highlighting installation"
	(test -d $${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting && echo "zsh-syntax-highlighting exist\n") || (echo "cloning zsh-syntax-highlighting\n" && git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting)
	@echo "ðŸŒ® done zsh-syntax-highlighting âœ…"

neoviminstall:
	@echo "ðŸ’¾ neovim installation"
	brew list neovim || brew install --HEAD neovim
	@echo "ðŸŒ® done neovim âœ…"

vimpluginstall: neoviminstall
	@echo "ðŸ’¾ vim plug installation"
	(test -f "$${XDG_DATA_HOME:-$$HOME/.local/share}"/nvim/site/autoload/plug.vim && echo "plug vim exist\n") || (echo "cloning plug vim\n" && sh -c 'curl -fLo "$${XDG_DATA_HOME:-$$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
	@echo "ðŸŒ® done vim-plug âœ…"

tmuxinstall:
	@echo "ðŸ’¾ tmux installation"
	brew list tmux || brew install tmux
	echo "ðŸŒ® done tmux âœ…"

starshipinstall:
	@echo "ðŸ’¾ starship installation"
	brew list starship || brew install starship
	@echo "ðŸŒ® done starship âœ…"

# ====== PYENV ======
pyenv: pyenvprerequisitesinstall pyenvinstall pyenvinstall

pyenvprerequisitesinstall:
	@echo "ðŸ’¾ pyenv prerequisites installation"
	brew list openssl || brew install openssl
	brew list readline || brew install readline
	brew list sqlite3 || brew install sqlite3
	brew list xz || brew install xz
	brew list zlib || brew install zlib
	@echo "ðŸŒ® done pyenv prerequisites âœ…"

pyenvinstall: pyenvprerequisitesinstall
	@echo "ðŸ’¾ pyenv installation"
	brew list pyenv || brew install pyenv
	@echo "ðŸŒ® done pyenv âœ…"

pyenvpythonltsinstall: pyenvinstall
	@echo "ðŸ’¾ latest python installation"
	pyenv install $$(pyenv install --list | grep -v - | grep -v b | tail -1)

# ====== PYTHON SETUP ======
pythonsetupglobal:
	@echo "++++++ PYTHON VERSIONS ++++++"
	pyenv versions
	@echo "+++++++++++++++++++++++++++++"
	pyenv global $(pyenv install --list | grep -v - | grep -v b | tail -1)
	@echo "++++++ PYTHON VERSION ++++++"
	python --version
	@echo "++++++++++++++++++++++++++++"
	@echo "++++++ PIP VERSION ++++++"
	pip --version
	@echo "+++++++++++++++++++++++++"
	@echo "ðŸŒ® done latest python installation âœ…"

pythontools: pythonsetupglobal
	@echo "ðŸ’¾ pipenv installation"
	brew list pipenv || brew install pipenv
	@echo "ðŸŒ® done pipenv âœ…"
	@echo "ðŸ’¾ flake8 installation"
	which flake8 || pip install flake8
	@echo "ðŸŒ® done flake8 âœ…"
	@echo "ðŸ’¾ black installation"
	which black || pip install black
	@echo "ðŸŒ® done black âœ…"
	@echo "ðŸ’¾ isort installation"
	which isort || pip install isort
	@echo "ðŸŒ® done isort âœ…"
	@echo "ðŸ’¾ pylint installation"
	which pylint || pip install pylint
	@echo "ðŸŒ® done pylint âœ…"

# ====== DEVOPS ======
devops: terraforminstall kubectlinstall minikubeinstall

terraforminstall:
	@echo "ðŸ’¾ terraform installation"
	brew list terraform || brew tap hashicorp/tap
	brew list terraform || brew install hashicorp/tap/terraform
	@echo "ðŸŒ® done terraform âœ…"

kubectlinstall:
	echo "ðŸ’¾ kubectl installation"
	brew list kubernetes-cli || brew install kubernetes-cli
	kubectl version --client
	@echo "ðŸŒ® done kubectl âœ…"

minikubeinstall:
	@echo "ðŸ’¾ minikube installation"
	brew list minikube || brew install minikube
	minikube config set driver virtualbox
	@echo "ðŸŒ® done minikube âœ…"

# ====== NGROK ======
ngrok: ngronkdownload ngrokunzip

ngronkdownload:
	@echo "ðŸ’ˆ ngrok installation"
	(test -d ${dev_root}/ngrok && echo "ngrok exist\n") || (echo "downloading ngrok\n" && mkdir -p ${dev_root}/ngrok && curl https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-darwin-${kind}64.zip -L -o ${dev_root}/ngrok/ngrok.zip)


ngrokunzip: ngronkdownload
	(test -f ~/${dev_root}/ngrok/ngrok.zip && echo "ngrok zip  exist -> unziping\n" && unzip ${dev_root}/ngrok/ngrok.zip -d ${dev_root}/ngrok ) || (echo "ngrok zip no exist\n")

ngrokclean:
	(test -f ${dev_root}/ngrok/ngrok.zip && echo "ngrok zip  exist -> removing zip\n" && rm -rf ${dev_root}/ngrok/ngrok.zip) || (echo "ngrok zip no exist\n")
	@echo "ðŸŒ® done ngrok âœ…"

# ====== NVM  ======
nvm: nvminstall nodejsltsinstall

nvminstall:
	@echo "ðŸ’¾ nvm installation"
	which nvm || curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v${nvm_version}/install.sh | bash
	@echo "ðŸŒ® done nvm âœ…"

nodejsltsinstall: nvminstall
	@echo "ðŸ’¾ node LTS installation"
	nvm install --lts
	@echo "ðŸŒ® done node LTS âœ…"
	@echo "++++++ NODE VERSION ++++++"
	node --version
	@echo "+++++++++++++++++++++++++++++"

# ====== FLUTTER ======
flutter: flutterdownload flutterunzip flutterdoctor

flutterdownload:
	@echo "ðŸ’ˆ flutter installation"
	which flutter || curl https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_${flutter_version}-stable.zip -L -o ${dev_root}/flutter.zip

flutterunzip: flutterdownload
	which flutter || unzip ${dev_root}/flutter.zip -d ${dev_root}

flutterclean: flutterunzip
	(test -f ${dev_root}/flutter.zip && echo "flutter zip  exist -> removing zip\n" && rm -rf ${dev_root}/flutter.zip) || (echo "flutter zip no exist\n")

flutterdoctor: flutterclean
	flutter doctor
	echo "ðŸŒ® done flutter, ðŸ›Ž Platform setup => https://flutter.dev/docs/get-started/install/macos ðŸ›Ž âœ…"


fixcompaudit:
	@echo "*** ðŸ’Š FIX zsh compinit: insecure directories, run compaudit for list. ***"
	compaudit
	chmod g-w /usr/local/share/zsh
	chmod g-w /usr/local/share/zsh/site-functions
	echo "ðŸŒ® done fix âœ…"
